let capture,readdirAsync,getPageTemplate,getDataForPage,getPageHtml,getRootAppsPageHtml,getUserData,parseUrl,getParams,routeUtils,RemakeStore;_0d2‍.x([["initRenderedRoutes",()=>initRenderedRoutes]]);_0d2‍.w("../utils/async-utils",[["capture",["capture"],function(v){capture=v}],["readdirAsync",["readdirAsync"],function(v){readdirAsync=v}]]);_0d2‍.w("../utils/page-utils",[["getPageTemplate",["getPageTemplate"],function(v){getPageTemplate=v}],["getDataForPage",["getDataForPage"],function(v){getDataForPage=v}],["getPageHtml",["getPageHtml"],function(v){getPageHtml=v}],["getRootAppsPageHtml",["getRootAppsPageHtml"],function(v){getRootAppsPageHtml=v}]]);_0d2‍.w("./user-data",[["getUserData",["getUserData"],function(v){getUserData=v}]]);_0d2‍.w("parseurl",[["default",["parseUrl"],function(v){parseUrl=v}]]);_0d2‍.w("../utils/get-params",[["getParams",["getParams"],function(v){getParams=v}]]);_0d2‍.w("../utils/route-utils",[["default",["routeUtils"],function(v){routeUtils=v}]]);_0d2‍.w("./remake-store",[["default",["RemakeStore"],function(v){RemakeStore=v}]]);const path = require("upath");













/*
  Remake has 3 types of routes
  • BaseRoute
  • UsernameRoute
  • ItemRoute

  Combined, these routes can render these patterns:
  • /
  • /pageName
  • /username
  • /username/pageName/
  • /username/pageName/id
*/

async function renderPage({ req, res, pageName, username, itemId }) {
  let [pageTemplate, pageTemplateError] = await capture(
    getPageTemplate({ pageName, appName: req.appName })
  );

  if (!pageTemplate) {
    res.status(404).send("404 Not Found");
    return;
  }

  let pageAuthor;
  if (username) {
    [pageAuthor] = await capture(getUserData({ username, appName: req.appName }));

    // if username is in the route, there should be a corresponding user
    if (!pageAuthor) {
      res.status(404).send("404 Not Found");
      return;
    }
  }

  // GET DATA
  let [data, dataError] = await capture(
    getDataForPage({ req, res, appName: req.appName, pageAuthor, itemId, pageName })
  );

  if (dataError) {
    res.status(500).send("500 Server Error");
    return;
  }

  if (itemId && !data.currentItem) {
    res.status(404).send("404 Not Found");
    return;
  }

  let html = getPageHtml({
    pageTemplate,
    data,
    appName: req.appName,
    username,
    itemId,
    isPreviewing: req && req.query && req.query.preview,
  });
  res.send(html);
}

       async function initRenderedRoutes({ app }) {
  app.get("*", async function (req, res) {
    // don't cache html from these routes
    res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");

    let params = req.urlData.pageParams;

    if (params.redirectToUserRoute) {
      res.redirect("/user/" + params.pageName);
      return;
    }

    await renderPage({ req, res, ...params });
  });
}
