let getDirForAllPartials,getDirForPartialTemplate,capture,readFileAsync,getAllFileContentsInDirectory,forInLoopRegex;_834‍.x([["getPartial",()=>getPartial],["getPartialsAsInlinePartials",()=>getPartialsAsInlinePartials]]);_834‍.w("./directory-helpers",[["getDirForAllPartials",["getDirForAllPartials"],function(v){getDirForAllPartials=v}],["getDirForPartialTemplate",["getDirForPartialTemplate"],function(v){getDirForPartialTemplate=v}]]);_834‍.w("./async-utils",[["capture",["capture"],function(v){capture=v}],["readFileAsync",["readFileAsync"],function(v){readFileAsync=v}],["getAllFileContentsInDirectory",["getAllFileContentsInDirectory"],function(v){getAllFileContentsInDirectory=v}]]);_834‍.w("./common",[["forInLoopRegex",["forInLoopRegex"],function(v){forInLoopRegex=v}]]);



       async function getPartial({ appName, partialName }) {
  let partialTemplateDir = getDirForPartialTemplate({ partialName, appName });
  let [partialTemplateString] = await capture(readFileAsync(partialTemplateDir, "utf8"));
  return partialTemplateString;
}

       async function getPartialsAsInlinePartials({ appName }) {
  let partialsDir = getDirForAllPartials({ appName });
  let [fileContentsArray] = await capture(
    getAllFileContentsInDirectory({ dir: partialsDir, fileType: "hbs" })
  );
  let inlinePartialsArray = fileContentsArray.map(obj => {
    let contentsWithoutForInLoop = obj.contents.replace(forInLoopRegex, '{{#for $2 itemName="$1"');
    return `{{#*inline "${obj.fileName}"}}\n${contentsWithoutForInLoop}\n{{/inline}}`;
  });
  let inlinePartialsString = inlinePartialsArray.join("\n");

  return inlinePartialsString;
}
