let $,getSaveData,ajaxPost,debounce,getAttributeValueAsArray,optionsData,callOnSaveCallbacks;_b73‍.x([["saveData",()=>saveData],["initSaveFunctions",()=>initSaveFunctions],["callSaveFunction",()=>callSaveFunction],["callSaveFunctionNextTick",()=>callSaveFunctionNextTick],["getSaveFuncInfo",()=>getSaveFuncInfo]]);_b73‍.w("../queryjs",[["$",["$"],function(v){$=v}]]);_b73‍.w("../get-save-data",[["getSaveData",["getSaveData"],function(v){getSaveData=v}]]);_b73‍.w("../hummingbird/lib/ajax",[["ajaxPost",["ajaxPost"],function(v){ajaxPost=v}]]);_b73‍.w("../hummingbird/lib/functions",[["debounce",["debounce"],function(v){debounce=v}]]);_b73‍.w("../parse-data-attributes",[["getAttributeValueAsArray",["getAttributeValueAsArray"],function(v){getAttributeValueAsArray=v}]]);_b73‍.w("./optionsData",[["default",["optionsData"],function(v){optionsData=v}]]);_b73‍.w("./callbacks",[["callOnSaveCallbacks",["callOnSaveCallbacks"],function(v){callOnSaveCallbacks=v}]]);







       function saveData({ data, path, saveToId }) {
  // make live.js reload all resources in its cache when page is saved so it doesn't reload the page when user data changes -- and only reloads when dev edits a template
  window.liveJsResourcesLoaded = false;
  _b73‍.a("ajaxPost",ajaxPost)("/save", { data, path, saveToId }, function (res) {
    // make live.js reload all resources in its cache when page is saved so it doesn't reload the page when user data changes -- and only reloads when dev edits a template
    window.liveJsResourcesLoaded = false;
    _b73‍.a("callOnSaveCallbacks",callOnSaveCallbacks)(res);
  });
}

let saveFunctionsLookup = {
  // default save function posts data to /save endpoint
  _defaultSave: function ({ data, path, saveToId, elem }) {
    saveData({ data, path, saveToId });
  },
};

       function initSaveFunctions() {
  if (_b73‍.a("optionsData",optionsData).saveFunctions) {
    Object.assign(saveFunctionsLookup, _b73‍.a("optionsData",optionsData).saveFunctions);
  }
}

// all saves go through here
       function callSaveFunction(targetElem) {
  let saveEnabled = !targetElem.closest("[no-save]");
  if (!saveEnabled) {
    return;
  }

  // get the save element, which is the closest element with a save attribute
  let saveElement = targetElem.closest("[custom-save], [key\\:id]");
  let isDefaultingToDataKeyIdSave = false;
  let isDefaultingToGlobalSave = false;
  let hasCustomSaveFunction = false;
  let saveFuncName = "_defaultSave";
  let savePath;
  let saveToId;

  // if there's no save element, use the body element
  if (!saveElement) {
    saveElement = document.body;
    isDefaultingToGlobalSave = true;
    saveFuncName = "_defaultSave";
  } else {
    if (saveElement.matches("[custom-save]")) {
      hasCustomSaveFunction = true;
      [saveFuncName, savePath, saveToId] = getSaveFuncInfo(saveElement);
    } else if (saveElement.matches("[key\\:id]")) {
      isDefaultingToDataKeyIdSave = true;
      saveFuncName = "_defaultSave";
      saveToId = saveElement.getAttribute("key:id");
    }
  }

  let saveFunc = saveFunctionsLookup[saveFuncName];
  let dataInsideSaveElement = _b73‍.a("getSaveData",getSaveData)(saveElement);

  // save the data
  saveFunc({ data: dataInsideSaveElement, elem: targetElem, path: savePath, saveToId });

  // show a warning if you think the save might be a mistakes
  let itemIdFromUrl = document.body.getAttribute("data-item-route");
  if (isDefaultingToGlobalSave && itemIdFromUrl) {
    console.log(
      `%cWarning: Data was just saved to your database, but not to the item matching the id in this page's url: "${itemIdFromUrl}". This might not be a mistake, but if it is you can correct it just add "key:${itemIdFromUrl}" to a high-level element.`,
      "color: #e03131;"
    );
  }

  // log the data if the debug option is turned on
  if (_b73‍.a("optionsData",optionsData).logDataOnSave) {
    let logDataOnSaveString = "";
    logDataOnSaveString += "[Dev mode] Logging Remake Data on save: ";

    if (isDefaultingToGlobalSave) {
      logDataOnSaveString += "Action: Saved entire page, ";
    } else if (isDefaultingToDataKeyIdSave) {
      logDataOnSaveString += `Action: Saved to nearest id (${saveToId}), `;
    } else if (hasCustomSaveFunction) {
      logDataOnSaveString += `Action: Saved to custom save function (${saveFuncName}), `;

      if (savePath) {
        logDataOnSaveString += `Action: Saved to path: ${savePath}, `;
      }

      if (saveToId) {
        logDataOnSaveString += `Action: Saved to id: ${saveToId}, `;
      }
    }

    _b73‍.g.console.log(logDataOnSaveString, "Data:", dataInsideSaveElement);
  }
}

// used when clicking an element/button that might want to set data ahead of the save
       function callSaveFunctionNextTick(...args) {
  setTimeout(() => {
    callSaveFunction(...args);
  });
}

       function getSaveFuncInfo(saveElement) {
  let dashCaseAttrName = "custom-save";
  let args = _b73‍.a("getAttributeValueAsArray",getAttributeValueAsArray)(saveElement, dashCaseAttrName);

  let funcName, savePath, saveToId;
  args.forEach(arg => {
    if (arg.startsWith("path:")) {
      savePath = arg.substring("path:".length);
    } else if (arg.startsWith("id:")) {
      saveToId = arg.substring("id:".length);
    } else {
      funcName = arg;
    }
  });

  funcName = funcName || "_defaultSave";

  return [funcName, savePath, saveToId];
}
